// Notification Utility - 通知工具类\n\nclass NotificationManager {\n  constructor() {\n    this.notifications = [];\n    this.maxNotifications = 5;\n    this.defaultDuration = 3000;\n  }\n\n  /**\n   * 显示成功通知\n   */\n  showSuccess(message, options = {}) {\n    return this.show({\n      type: 'success',\n      message: message,\n      icon: '✅',\n      ...options\n    });\n  }\n\n  /**\n   * 显示错误通知\n   */\n  showError(message, options = {}) {\n    return this.show({\n      type: 'error',\n      message: message,\n      icon: '❌',\n      duration: 5000, // 错误消息显示更长时间\n      ...options\n    });\n  }\n\n  /**\n   * 显示警告通知\n   */\n  showWarning(message, options = {}) {\n    return this.show({\n      type: 'warning',\n      message: message,\n      icon: '⚠️',\n      ...options\n    });\n  }\n\n  /**\n   * 显示信息通知\n   */\n  showInfo(message, options = {}) {\n    return this.show({\n      type: 'info',\n      message: message,\n      icon: 'ℹ️',\n      ...options\n    });\n  }\n\n  /**\n   * 显示加载通知\n   */\n  showLoading(message = '加载中...', options = {}) {\n    return this.show({\n      type: 'loading',\n      message: message,\n      icon: '⏳',\n      duration: 0, // 加载通知不自动消失\n      ...options\n    });\n  }\n\n  /**\n   * 显示通知\n   */\n  show(config) {\n    const notification = {\n      id: this.generateId(),\n      type: config.type || 'info',\n      message: config.message || '',\n      icon: config.icon || 'ℹ️',\n      duration: config.duration !== undefined ? config.duration : this.defaultDuration,\n      timestamp: Date.now(),\n      visible: true,\n      ...config\n    };\n\n    // 添加到通知列表\n    this.notifications.unshift(notification);\n\n    // 限制通知数量\n    if (this.notifications.length > this.maxNotifications) {\n      this.notifications = this.notifications.slice(0, this.maxNotifications);\n    }\n\n    // 使用微信原生提示\n    this.showWxToast(notification);\n\n    // 自动隐藏\n    if (notification.duration > 0) {\n      setTimeout(() => {\n        this.hide(notification.id);\n      }, notification.duration);\n    }\n\n    return notification.id;\n  }\n\n  /**\n   * 隐藏通知\n   */\n  hide(id) {\n    const index = this.notifications.findIndex(n => n.id === id);\n    if (index !== -1) {\n      this.notifications[index].visible = false;\n      \n      // 延迟移除，给动画时间\n      setTimeout(() => {\n        this.notifications.splice(index, 1);\n      }, 300);\n    }\n    \n    // 隐藏微信提示\n    wx.hideToast();\n    wx.hideLoading();\n  }\n\n  /**\n   * 清除所有通知\n   */\n  clear() {\n    this.notifications.forEach(notification => {\n      notification.visible = false;\n    });\n    \n    setTimeout(() => {\n      this.notifications = [];\n    }, 300);\n    \n    wx.hideToast();\n    wx.hideLoading();\n  }\n\n  /**\n   * 获取所有通知\n   */\n  getAll() {\n    return this.notifications.filter(n => n.visible);\n  }\n\n  /**\n   * 显示微信原生提示\n   */\n  showWxToast(notification) {\n    switch (notification.type) {\n      case 'success':\n        wx.showToast({\n          title: notification.message,\n          icon: 'success',\n          duration: notification.duration,\n          mask: true\n        });\n        break;\n        \n      case 'error':\n        wx.showToast({\n          title: notification.message,\n          icon: 'error',\n          duration: notification.duration,\n          mask: true\n        });\n        break;\n        \n      case 'loading':\n        wx.showLoading({\n          title: notification.message,\n          mask: true\n        });\n        break;\n        \n      default:\n        wx.showToast({\n          title: notification.message,\n          icon: 'none',\n          duration: notification.duration,\n          mask: true\n        });\n        break;\n    }\n  }\n\n  /**\n   * 生成唯一ID\n   */\n  generateId() {\n    return 'notification_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * 显示确认对话框\n   */\n  showConfirm(options = {}) {\n    return new Promise((resolve) => {\n      wx.showModal({\n        title: options.title || '确认',\n        content: options.content || '确定要执行此操作吗？',\n        confirmText: options.confirmText || '确定',\n        cancelText: options.cancelText || '取消',\n        confirmColor: options.confirmColor || '#0A4A39',\n        cancelColor: options.cancelColor || '#666666',\n        success: (res) => {\n          resolve(res.confirm);\n        },\n        fail: () => {\n          resolve(false);\n        }\n      });\n    });\n  }\n\n  /**\n   * 显示操作表\n   */\n  showActionSheet(options = {}) {\n    return new Promise((resolve) => {\n      wx.showActionSheet({\n        itemList: options.itemList || [],\n        itemColor: options.itemColor || '#000000',\n        success: (res) => {\n          resolve({\n            success: true,\n            tapIndex: res.tapIndex,\n            selectedItem: options.itemList[res.tapIndex]\n          });\n        },\n        fail: () => {\n          resolve({\n            success: false,\n            tapIndex: -1,\n            selectedItem: null\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * 显示输入框\n   */\n  showPrompt(options = {}) {\n    return new Promise((resolve) => {\n      wx.showModal({\n        title: options.title || '输入',\n        content: options.placeholder || '请输入内容',\n        editable: true,\n        placeholderText: options.placeholder || '请输入内容',\n        confirmText: options.confirmText || '确定',\n        cancelText: options.cancelText || '取消',\n        success: (res) => {\n          if (res.confirm) {\n            resolve({\n              success: true,\n              value: res.content || ''\n            });\n          } else {\n            resolve({\n              success: false,\n              value: ''\n            });\n          }\n        },\n        fail: () => {\n          resolve({\n            success: false,\n            value: ''\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * 显示网络错误通知\n   */\n  showNetworkError(error = {}) {\n    let message = '网络连接失败';\n    \n    if (error.statusCode) {\n      switch (error.statusCode) {\n        case 400:\n          message = '请求参数错误';\n          break;\n        case 401:\n          message = '未授权，请重新登录';\n          break;\n        case 403:\n          message = '访问被拒绝';\n          break;\n        case 404:\n          message = '请求的资源不存在';\n          break;\n        case 500:\n          message = '服务器内部错误';\n          break;\n        case 502:\n          message = '网关错误';\n          break;\n        case 503:\n          message = '服务暂时不可用';\n          break;\n        default:\n          message = `网络错误 (${error.statusCode})`;\n          break;\n      }\n    } else if (error.errMsg) {\n      if (error.errMsg.includes('timeout')) {\n        message = '请求超时，请检查网络连接';\n      } else if (error.errMsg.includes('fail')) {\n        message = '网络连接失败，请检查网络设置';\n      }\n    }\n    \n    return this.showError(message, {\n      duration: 4000\n    });\n  }\n\n  /**\n   * 显示权限错误通知\n   */\n  showPermissionError(permission = '') {\n    const messages = {\n      'camera': '需要相机权限才能使用此功能',\n      'location': '需要位置权限才能使用此功能',\n      'microphone': '需要麦克风权限才能使用此功能',\n      'album': '需要相册权限才能使用此功能',\n      'notification': '需要通知权限才能接收消息'\n    };\n    \n    const message = messages[permission] || '需要相应权限才能使用此功能';\n    \n    return this.showWarning(message, {\n      duration: 4000\n    });\n  }\n\n  /**\n   * 显示操作成功通知\n   */\n  showOperationSuccess(operation = '') {\n    const messages = {\n      'save': '保存成功',\n      'delete': '删除成功',\n      'update': '更新成功',\n      'create': '创建成功',\n      'upload': '上传成功',\n      'download': '下载成功',\n      'share': '分享成功',\n      'copy': '复制成功'\n    };\n    \n    const message = messages[operation] || '操作成功';\n    \n    return this.showSuccess(message);\n  }\n\n  /**\n   * 显示操作失败通知\n   */\n  showOperationError(operation = '', error = null) {\n    const messages = {\n      'save': '保存失败',\n      'delete': '删除失败',\n      'update': '更新失败',\n      'create': '创建失败',\n      'upload': '上传失败',\n      'download': '下载失败',\n      'share': '分享失败',\n      'copy': '复制失败'\n    };\n    \n    let message = messages[operation] || '操作失败';\n    \n    if (error && error.message) {\n      message += ': ' + error.message;\n    }\n    \n    return this.showError(message);\n  }\n}\n\n// 创建全局实例\nconst notification = new NotificationManager();\n\n// 导出实例和类\nmodule.exports = {\n  notification,\n  NotificationManager\n};"