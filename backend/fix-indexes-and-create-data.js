const mongoose = require('mongoose');
require('dotenv').config({ path: './.env' });

// Import models
const User = require('./src/models/User');
const Event = require('./src/models/Event');

async function fixIndexesAndCreateData() {
  try {
    // Connect to database
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // Drop problematic indexes
    try {
      await User.collection.dropIndex('openid_1');
      console.log('‚úÖ Dropped openid_1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è openid_1 index not found or already dropped');
    }

    try {
      await User.collection.dropIndex('unionid_1');
      console.log('‚úÖ Dropped unionid_1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è unionid_1 index not found or already dropped');
    }

    try {
      await User.collection.dropIndex('phone_1');
      console.log('‚úÖ Dropped phone_1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è phone_1 index not found or already dropped');
    }

    try {
      await User.collection.dropIndex('region_1');
      console.log('‚úÖ Dropped region_1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è region_1 index not found or already dropped');
    }

    try {
      await User.collection.dropIndex('customId_1');
      console.log('‚úÖ Dropped customId_1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è customId_1 index not found or already dropped');
    }

    try {
      await User.collection.dropIndex('isActive_1');
      console.log('‚úÖ Dropped isActive_1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è isActive_1 index not found or already dropped');
    }

    try {
      await User.collection.dropIndex('lastLoginAt_-1');
      console.log('‚úÖ Dropped lastLoginAt_-1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è lastLoginAt_-1 index not found or already dropped');
    }

    try {
      await User.collection.dropIndex('createdAt_-1');
      console.log('‚úÖ Dropped createdAt_-1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è createdAt_-1 index not found or already dropped');
    }

    // Check existing data
    const existingUsers = await User.countDocuments();
    const existingEvents = await Event.countDocuments();
    
    console.log(`üìä Current data: ${existingUsers} users, ${existingEvents} events`);

    // Create admin user if doesn't exist
    let adminUser = await User.findOne({ email: 'admin@tennis.com' });
    if (!adminUser) {
      adminUser = new User({
        nickname: 'Á≥ªÁªüÁÆ°ÁêÜÂëò',
        email: 'admin@tennis.com',
        password: 'tennis2024',
        role: 'admin',
        status: 'active',
        total_points: 1000,
        ext_info: {
          level: 'professional',
          region: 'Âåó‰∫¨'
        }
      });
      await adminUser.save();
      console.log('‚úÖ Created admin user');
    } else {
      console.log('‚ÑπÔ∏è Admin user already exists');
    }

    // Create test users
    const testUsers = [
      {
        nickname: 'Âº†‰∏â',
        status: 'active',
        total_points: 850,
        ext_info: { level: 'advanced', region: '‰∏äÊµ∑' }
      },
      {
        nickname: 'ÊùéÂõõ',
        status: 'active', 
        total_points: 650,
        ext_info: { level: 'intermediate', region: 'ÂπøÂ∑û' }
      },
      {
        nickname: 'Áéã‰∫î',
        status: 'active',
        total_points: 320,
        ext_info: { level: 'intermediate', region: 'Ê∑±Âú≥' }
      },
      {
        nickname: 'ËµµÂÖ≠',
        status: 'active',
        total_points: 120,
        ext_info: { level: 'beginner', region: 'Êù≠Â∑û' }
      },
      {
        nickname: 'Èí±‰∏É',
        status: 'active',
        total_points: 45,
        ext_info: { level: 'beginner', region: 'Âçó‰∫¨' }
      },
      {
        nickname: 'Â≠ôÂÖ´',
        status: 'active',
        total_points: 280,
        ext_info: { level: 'intermediate', region: 'ÊàêÈÉΩ' }
      },
      {
        nickname: 'Âë®‰πù',
        status: 'active',
        total_points: 520,
        ext_info: { level: 'advanced', region: 'Ê≠¶Ê±â' }
      },
      {
        nickname: 'Âê¥ÂçÅ',
        status: 'active',
        total_points: 95,
        ext_info: { level: 'beginner', region: 'Ë•øÂÆâ' }
      }
    ];

    for (const userData of testUsers) {
      try {
        const existingUser = await User.findOne({ nickname: userData.nickname });
        if (!existingUser) {
          await User.create(userData);
          console.log(`‚úÖ Created user: ${userData.nickname}`);
        } else {
          console.log(`‚ÑπÔ∏è User ${userData.nickname} already exists`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Failed to create user ${userData.nickname}:`, error.message);
      }
    }

    // Create test events if needed
    const currentEventCount = await Event.countDocuments();
    if (currentEventCount < 10) {
      const testEvents = [
        {
          title: '2024Âπ¥Êò•Â≠£ÁΩëÁêÉÈî¶Ê†áËµõ',
          category: 'tennis',
          start_time: new Date('2024-03-15T09:00:00Z'),
          end_time: new Date('2024-03-15T18:00:00Z'),
          location: 'Âåó‰∫¨ÂõΩÂÆ∂ÁΩëÁêÉ‰∏≠ÂøÉ',
          max_participants: 64,
          status: 'published',
          description: 'Êò•Â≠£ÁΩëÁêÉÈî¶Ê†áËµõÔºåÊ¨¢ËøéÂêÑÁ∫ßÂà´ÈÄâÊâãÂèÇÂä†',
          ext_info: {
            eventType: 'Áî∑Â≠êÂçïÊâì',
            registrationDeadline: '2024-03-01',
            organizer: { name: 'Âåó‰∫¨ÁΩëÁêÉÂçè‰ºö' },
            surface: 'Á°¨Âú∞',
            prizePool: 10000,
            registrationFee: 200
          }
        },
        {
          title: 'Â§èÂ≠£ÈùíÂ∞ëÂπ¥ÁΩëÁêÉËÆ≠ÁªÉËê•',
          category: 'tennis',
          start_time: new Date('2024-07-01T08:00:00Z'),
          end_time: new Date('2024-07-07T17:00:00Z'),
          location: '‰∏äÊµ∑ÁΩëÁêÉ‰ø±‰πêÈÉ®',
          max_participants: 32,
          status: 'ongoing',
          description: '‰∏∫ÈùíÂ∞ëÂπ¥Êèê‰æõ‰∏ì‰∏öÁΩëÁêÉËÆ≠ÁªÉ',
          ext_info: {
            eventType: 'ËÆ≠ÁªÉËê•',
            registrationDeadline: '2024-06-15',
            organizer: { name: '‰∏äÊµ∑ÈùíÂ∞ëÂπ¥‰ΩìËÇ≤Âçè‰ºö' },
            surface: 'Á∫¢Âúü',
            prizePool: 0,
            registrationFee: 800
          }
        },
        {
          title: '‰ºÅ‰∏öÁΩëÁêÉÂèãË∞äËµõ',
          category: 'tennis',
          start_time: new Date('2024-09-20T14:00:00Z'),
          end_time: new Date('2024-09-20T18:00:00Z'),
          location: 'Ê∑±Âú≥Êπæ‰ΩìËÇ≤‰∏≠ÂøÉ',
          max_participants: 48,
          status: 'published',
          description: '‰ºÅ‰∏öÈó¥ÁΩëÁêÉÂèãË∞äËµõÔºå‰øÉËøõ‰∫§ÊµÅÂêà‰Ωú',
          ext_info: {
            eventType: 'Âõ¢‰ΩìËµõ',
            registrationDeadline: '2024-09-10',
            organizer: { name: 'Ê∑±Âú≥‰ºÅ‰∏ö‰ΩìËÇ≤ËÅîÁõü' },
            surface: 'Á°¨Âú∞',
            prizePool: 5000,
            registrationFee: 100
          }
        }
      ];

      for (const eventData of testEvents) {
        try {
          const existingEvent = await Event.findOne({ title: eventData.title });
          if (!existingEvent) {
            await Event.create(eventData);
            console.log(`‚úÖ Created event: ${eventData.title}`);
          } else {
            console.log(`‚ÑπÔ∏è Event ${eventData.title} already exists`);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è Failed to create event ${eventData.title}:`, error.message);
        }
      }
    }

    // Get final counts
    const finalUsers = await User.countDocuments();
    const finalEvents = await Event.countDocuments();
    const activeUsers = await User.countDocuments({ status: 'active' });
    const publishedEvents = await Event.countDocuments({ status: 'published' });
    
    console.log('üìä Final data:');
    console.log(`   - Total users: ${finalUsers} (${activeUsers} active)`);
    console.log(`   - Total events: ${finalEvents} (${publishedEvents} published)`);
    
    console.log('‚úÖ Data setup completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error setting up data:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
  }
}

fixIndexesAndCreateData();